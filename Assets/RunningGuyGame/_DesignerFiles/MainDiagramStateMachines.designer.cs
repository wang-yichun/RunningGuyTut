// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class CharacterMovementStateMachineBase : Invert.StateMachine.StateMachine {
    
    private StateMachineTrigger _GoLeft;
    
    private StateMachineTrigger _GoRight;
    
    private StateMachineTrigger _Stop;
    
    private Idle _Idle;
    
    private MoveLeft _MoveLeft;
    
    private MoveRight _MoveRight;
    
    public CharacterMovementStateMachineBase(ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public virtual StateMachineTrigger GoLeft {
        get {
            if ((this._GoLeft == null)) {
                this._GoLeft = new StateMachineTrigger(this, "GoLeft");
            }
            return this._GoLeft;
        }
    }
    
    public virtual StateMachineTrigger GoRight {
        get {
            if ((this._GoRight == null)) {
                this._GoRight = new StateMachineTrigger(this, "GoRight");
            }
            return this._GoRight;
        }
    }
    
    public virtual StateMachineTrigger Stop {
        get {
            if ((this._Stop == null)) {
                this._Stop = new StateMachineTrigger(this, "Stop");
            }
            return this._Stop;
        }
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.Idle;
        }
    }
    
    public virtual Idle Idle {
        get {
            if ((this._Idle == null)) {
                this._Idle = new Idle();
            }
            return this._Idle;
        }
    }
    
    public virtual MoveLeft MoveLeft {
        get {
            if ((this._MoveLeft == null)) {
                this._MoveLeft = new MoveLeft();
            }
            return this._MoveLeft;
        }
    }
    
    public virtual MoveRight MoveRight {
        get {
            if ((this._MoveRight == null)) {
                this._MoveRight = new MoveRight();
            }
            return this._MoveRight;
        }
    }
    
    public override void Compose(List<State> states) {
        base.Compose(states);
        this.Idle.StateMachine = this;
        Idle.GoLeft = new StateTransition("GoLeft", Idle,MoveLeft);
        Idle.GoRight = new StateTransition("GoRight", Idle,MoveRight);
        Idle.AddTrigger(GoLeft, Idle.GoLeft);
        Idle.AddTrigger(GoRight, Idle.GoRight);
        states.Add(Idle);
        this.MoveLeft.StateMachine = this;
        MoveLeft.Stop = new StateTransition("Stop", MoveLeft,Idle);
        MoveLeft.GoRight = new StateTransition("GoRight", MoveLeft,MoveRight);
        MoveLeft.AddTrigger(Stop, MoveLeft.Stop);
        MoveLeft.AddTrigger(GoRight, MoveLeft.GoRight);
        states.Add(MoveLeft);
        this.MoveRight.StateMachine = this;
        MoveRight.GoLeft = new StateTransition("GoLeft", MoveRight,MoveLeft);
        MoveRight.Stop = new StateTransition("Stop", MoveRight,Idle);
        MoveRight.AddTrigger(GoLeft, MoveRight.GoLeft);
        MoveRight.AddTrigger(Stop, MoveRight.Stop);
        states.Add(MoveRight);
    }
}

public class CharacterJumpStateMachineBase : Invert.StateMachine.StateMachine {
    
    private StateMachineTrigger _JumpExpected;
    
    private StateMachineTrigger _LeftGround;
    
    private StateMachineTrigger _Landed;
    
    private NoJump _NoJump;
    
    private DoJump _DoJump;
    
    private InTheAir _InTheAir;
    
    public CharacterJumpStateMachineBase(ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public virtual StateMachineTrigger JumpExpected {
        get {
            if ((this._JumpExpected == null)) {
                this._JumpExpected = new StateMachineTrigger(this, "JumpExpected");
            }
            return this._JumpExpected;
        }
    }
    
    public virtual StateMachineTrigger LeftGround {
        get {
            if ((this._LeftGround == null)) {
                this._LeftGround = new StateMachineTrigger(this, "LeftGround");
            }
            return this._LeftGround;
        }
    }
    
    public virtual StateMachineTrigger Landed {
        get {
            if ((this._Landed == null)) {
                this._Landed = new StateMachineTrigger(this, "Landed");
            }
            return this._Landed;
        }
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.NoJump;
        }
    }
    
    public virtual NoJump NoJump {
        get {
            if ((this._NoJump == null)) {
                this._NoJump = new NoJump();
            }
            return this._NoJump;
        }
    }
    
    public virtual DoJump DoJump {
        get {
            if ((this._DoJump == null)) {
                this._DoJump = new DoJump();
            }
            return this._DoJump;
        }
    }
    
    public virtual InTheAir InTheAir {
        get {
            if ((this._InTheAir == null)) {
                this._InTheAir = new InTheAir();
            }
            return this._InTheAir;
        }
    }
    
    public override void Compose(List<State> states) {
        base.Compose(states);
        this.NoJump.StateMachine = this;
        NoJump.JumpExpected = new StateTransition("JumpExpected", NoJump,DoJump);
        NoJump.LeftGround = new StateTransition("LeftGround", NoJump,InTheAir);
        NoJump.AddTrigger(JumpExpected, NoJump.JumpExpected);
        NoJump.AddTrigger(LeftGround, NoJump.LeftGround);
        states.Add(NoJump);
        this.DoJump.StateMachine = this;
        DoJump.LeftGround = new StateTransition("LeftGround", DoJump,InTheAir);
        DoJump.AddTrigger(LeftGround, DoJump.LeftGround);
        states.Add(DoJump);
        this.InTheAir.StateMachine = this;
        InTheAir.Landed = new StateTransition("Landed", InTheAir,NoJump);
        InTheAir.JumpExpected = new StateTransition("JumpExpected", InTheAir,DoJump);
        InTheAir.AddTrigger(Landed, InTheAir.Landed);
        InTheAir.AddTrigger(JumpExpected, InTheAir.JumpExpected);
        states.Add(InTheAir);
    }
}

public class Idle : Invert.StateMachine.State {
    
    private StateTransition _GoLeft;
    
    private StateTransition _GoRight;
    
    public virtual StateTransition GoLeft {
        get {
            return this._GoLeft;
        }
        set {
            _GoLeft = value;
        }
    }
    
    public virtual StateTransition GoRight {
        get {
            return this._GoRight;
        }
        set {
            _GoRight = value;
        }
    }
    
    public override string Name {
        get {
            return "Idle";
        }
    }
    
    private void GoLeftTransition() {
        this.Transition(this.GoLeft);
    }
    
    private void GoRightTransition() {
        this.Transition(this.GoRight);
    }
}

public class MoveLeft : Invert.StateMachine.State {
    
    private StateTransition _Stop;
    
    private StateTransition _GoRight;
    
    public virtual StateTransition Stop {
        get {
            return this._Stop;
        }
        set {
            _Stop = value;
        }
    }
    
    public virtual StateTransition GoRight {
        get {
            return this._GoRight;
        }
        set {
            _GoRight = value;
        }
    }
    
    public override string Name {
        get {
            return "MoveLeft";
        }
    }
    
    private void StopTransition() {
        this.Transition(this.Stop);
    }
    
    private void GoRightTransition() {
        this.Transition(this.GoRight);
    }
}

public class MoveRight : Invert.StateMachine.State {
    
    private StateTransition _GoLeft;
    
    private StateTransition _Stop;
    
    public virtual StateTransition GoLeft {
        get {
            return this._GoLeft;
        }
        set {
            _GoLeft = value;
        }
    }
    
    public virtual StateTransition Stop {
        get {
            return this._Stop;
        }
        set {
            _Stop = value;
        }
    }
    
    public override string Name {
        get {
            return "MoveRight";
        }
    }
    
    private void GoLeftTransition() {
        this.Transition(this.GoLeft);
    }
    
    private void StopTransition() {
        this.Transition(this.Stop);
    }
}

public class NoJump : Invert.StateMachine.State {
    
    private StateTransition _JumpExpected;
    
    private StateTransition _LeftGround;
    
    public virtual StateTransition JumpExpected {
        get {
            return this._JumpExpected;
        }
        set {
            _JumpExpected = value;
        }
    }
    
    public virtual StateTransition LeftGround {
        get {
            return this._LeftGround;
        }
        set {
            _LeftGround = value;
        }
    }
    
    public override string Name {
        get {
            return "NoJump";
        }
    }
    
    private void JumpExpectedTransition() {
        this.Transition(this.JumpExpected);
    }
    
    private void LeftGroundTransition() {
        this.Transition(this.LeftGround);
    }
}

public class DoJump : Invert.StateMachine.State {
    
    private StateTransition _LeftGround;
    
    public virtual StateTransition LeftGround {
        get {
            return this._LeftGround;
        }
        set {
            _LeftGround = value;
        }
    }
    
    public override string Name {
        get {
            return "DoJump";
        }
    }
    
    private void LeftGroundTransition() {
        this.Transition(this.LeftGround);
    }
}

public class InTheAir : Invert.StateMachine.State {
    
    private StateTransition _Landed;
    
    private StateTransition _JumpExpected;
    
    public virtual StateTransition Landed {
        get {
            return this._Landed;
        }
        set {
            _Landed = value;
        }
    }
    
    public virtual StateTransition JumpExpected {
        get {
            return this._JumpExpected;
        }
        set {
            _JumpExpected = value;
        }
    }
    
    public override string Name {
        get {
            return "InTheAir";
        }
    }
    
    private void LandedTransition() {
        this.Transition(this.Landed);
    }
    
    private void JumpExpectedTransition() {
        this.Transition(this.JumpExpected);
    }
}
